buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id "org.sonarqube" version "2.7"
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'groovy'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

if(JavaVersion.current() != JavaVersion.VERSION_11) {
    throw new GradleException("This project requires Java 11, but it's running on "+JavaVersion.current())
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

group = 'net.gleske'
archivesBaseName = 'jervis'
jar.baseName = 'jervis'
version = "${version}"

ext.groovyVersion = System.getenv('GROOVY_VERSION')?: '2.4.21'
ext.ossrhUsername = hasProperty('ossrhUsername')?project['ossrhUsername']:''
ext.ossrhPassword = hasProperty('ossrhPassword')?project['ossrhPassword']:''
ext.snakeYamlVersion = '1.33'

//Apparently cobertura is only accurate at Java 1.6 byte code and earlier
//However, this caused a bug that if this library is used on JDK7+ and then
//throws a groovy exception.  Instead, an IncompatibleClassChangeError is thrown.
//http://blog.proxerd.pl/article/how-to-fix-incompatibleclasschangeerror-for-your-groovy-projects-running-on-jdk7
//sourceCompatibility = 1.6

apply from: 'file:gradle/groovydoc.gradle'
apply from: 'file:gradle/jervis.gradle'

println "Using Groovy ${groovyVersion}"
println "Using Java ${org.gradle.internal.jvm.Jvm.current()}"
println "Building ${archivesBaseName}-${version}"

repositories {
    mavenCentral()
}

// Address security vulnerability identified by DependencyTrack located as a
// transitive dependency within groovy-ant.
configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.apache.ant:ant:1.9.15') with module('org.apache.ant:ant:1.9.16')
            substitute module('org.apache.ant:ant-antlr:1.9.15') with module('org.apache.ant:ant-antlr:1.9.16')
            substitute module('org.apache.ant:ant-junit:1.9.15') with module('org.apache.ant:ant-junit:1.9.16')
        }
    }
}

dependencies {
    //compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-ant:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-groovydoc:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-json:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy-templates:${groovyVersion}"
    implementation "org.codehaus.groovy:groovy:${groovyVersion}"
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.72'
    implementation "org.yaml:snakeyaml:${snakeYamlVersion}"
    testImplementation 'junit:junit:4.12'
    testImplementation "org.codehaus.groovy:groovy-test:${groovyVersion}"
    testImplementation "org.codehaus.groovy:groovy-console:${groovyVersion}"
    testImplementation 'org.codenarc:CodeNarc:2.2.0'
    testImplementation 'org.slf4j:slf4j-nop:1.7.32'
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = '128m'
    maxHeapSize = '512m'

    //MaxPermSize was removed from Java 1.8
    // set JVM arguments for the test JVM(s)
    //jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle('Running test: ' + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle('Test: ' + descriptor + ' produced standard out/err: ' + event.message )
    }
}

//http://swalsh.org/blog/2014/07/17/running-the-groovy-console-from-gradle/
task( console, dependsOn: "classes", type: JavaExec ) {
    main = "groovy.ui.Console"
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
}

task( update_vscode, dependsOn: "classes" ) {
    doLast {
        String classpath = (sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath).asPath
        Map launch = (new groovy.json.JsonSlurper()).parseText(new File('.vscode/launch.json').text)
        launch.configurations[0].classPaths = classpath.tokenize(':')

        new File('.vscode/launch.json').withWriter('UTF-8') { writer ->
            writer << groovy.json.JsonOutput.prettyPrint((launch as groovy.json.JsonBuilder).toString())
        }
    }
}

//Maven Central uploads
task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    includes = ['net/gleske/**/*.class']
    excludes = ['*.json', 'mocks/**/*', '**/*Test$_*.class', '**/*Test.class']
    from sourceSets.test.output
}

task testSourcesJar(type: Jar) {
    classifier = 'tests-sources'
    includes = ['net/gleske/**/*.groovy']
    excludes = ['**/*Test.groovy']
    from sourceSets.test.allSource
}

artifacts {
    archives javadocJar, sourcesJar, testJar, testSourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
    //sign publishing.publications.mavenJava
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Jervis'
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'Travis-like Jenkins job generation using Jenkins Job DSL plugin groovy scripts. Reads .travis.yml and generates a job in Jenkins.'
                url = 'https://github.com/samrocketman/jervis'

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url  = 'https://raw.githubusercontent.com/samrocketman/jervis/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'sag47'
                        name = 'Sam Gleske'
                        email = 'sam.mxracer@gmail.com'
                    }
                }

                scm {
                    connection = 'https://github.com/samrocketman/jervis.git'
                    developerConnection = 'git@github.com:samrocketman/jervis.git'
                    url = 'https://github.com/samrocketman/jervis'
                }
            }
        }
    }
}

// disable Gradle metadata in maven publishing
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

//dependencies for building a jar
jar.dependsOn tasks.findAll { task -> task.name.endsWith('Jar') }

//disable optimizations for accurate branch coverage
//http://pbetkier.blogspot.com/2014/08/groovy-code-coverage-issues.html
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':jacocoTestReport')) {
        compileGroovy.groovyOptions.optimizationOptions.all = false
    }
    if (graph.hasTask(':publish')) {
        if(!(System.getenv('ORG_GRADLE_PROJECT_signingKey') && System.getenv('ORG_GRADLE_PROJECT_signingPassword'))) {
            throw new GradleException("ERROR: Attempting to release without signing key and password.  See RELEASE.md for details.")
        }
    }
}

jacocoTestReport {
    reports {
        csv.enabled false
        xml {
            enabled true
            destination file("${buildDir}/test-results/jacoco.xml")
        }
        html.destination file("${buildDir}/reports/jacoco")
    }
}

coveralls {
    jacocoReportPath 'build/test-results/jacoco.xml'
}

// sonarqube integration
sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/test-results/jacoco.xml"
    }
}
project.tasks["sonarqube"].dependsOn "check"
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

//http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
//generate gradlew with: ./gradlew wrapper --gradle-version 5.6.3
